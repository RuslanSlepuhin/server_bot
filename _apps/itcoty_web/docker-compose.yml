
services:
  nginx:
    image: nginx:alpine
    container_name: itcoty_web.nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
    depends_on:
      - frontend
      - backend
    networks:
      - bac_net

  postgresql:
    image: postgres:16.0-alpine3.18
    container_name: itcoty_web.postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DEV_DB_NAME}
      POSTGRES_USER: ${DEV_DB_USER}
      POSTGRES_PASSWORD: ${DEV_DB_PASSWORD}
    init: true
    ports:
      - "5432:5432"
    networks:
      - bac_net
    volumes:
      - ./.local/postgresql/data/:/var/lib/postgresql/data/:rw
    healthcheck:
      test: pg_isready -d "${DEV_DB_NAME}" -U "${DEV_DB_USER}" || exit 1
      interval: 15s
      retries: 5
      start_period: 5s
      timeout: 5s

  backend:
    image: itcoty_web
    container_name: itcoty_web.backend
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    init: true
    networks:
      - bac_net
    ports:
      - "8000:8000"
    depends_on:
      postgresql:
        condition: service_healthy
    entrypoint: [ sh, ./docker-entrypoint.sh ]

  frontend:
    image: ghcr.io/mixail132/itcoty_react_app:latest
    container_name: itcoty_web.frontend
    volumes:
      - .:/app
    ports:
      - "3000:80"
    networks:
      - bac_net

networks:
  bac_net:
    name: itcoty_web.backend
    driver: bridge



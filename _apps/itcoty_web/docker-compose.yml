
services:

  base:
    image: postgres:16.0-alpine3.18
    container_name: itcoty_web.postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DEV_DB_NAME}
      POSTGRES_USER: ${DEV_DB_USER}
      POSTGRES_PASSWORD: ${DEV_DB_PASSWORD}
    init: true
    ports:
      - "5433:5432"
    networks:
      - bac_net
    volumes:
      - ./.local/postgresql/data/:/var/lib/postgresql/data/:rw
    healthcheck:
      test: pg_isready -d "${DEV_DB_NAME}" -U "${DEV_DB_USER}" || exit 1
      interval: 15s
      retries: 5
      start_period: 5s
      timeout: 5s

  api:
    image: api
    container_name: itcoty_web.api
    build:
      context: .
    volumes:
      - .:/app
    init: true
    networks:
      - bac_net
    ports:
      - "8008:8000"
    depends_on:
      base:
        condition: service_healthy
    entrypoint: [ sh, ./docker-entrypoint.sh ]

  django:
    image: django
    container_name: itcoty_web.django
    build:
      context: .
    volumes:
      - .:/app
    init: true
    networks:
      - bac_net
    ports:
      - "8000:8000"
    depends_on:
      api:
        condition: service_started
      base:
        condition: service_healthy
    command: [ python, manage.py, runserver, 0.0.0.0:8000, --settings=itcoty_web.drfout ]

  node:
    image: ghcr.io/zheniagnedchik/itcoty:latest
    container_name: itcoty_web.node
    ports:
      - "3000:3000"
    networks:
      - bac_net
    depends_on:
      - api

  nginx:
    image: nginx:alpine
    container_name: itcoty_web.nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.local/static:/static
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    command: sh -c "nginx -g 'daemon off;'"
    depends_on:
      - node
      - api
    networks:
      - bac_net

networks:
  bac_net:
    name: itcoty_web.network
    driver: bridge

volumes:
  static_volume:


